// Generated by Dagger (https://dagger.dev).
package ru.surf._module_name_.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import ru.surf._module_name_.data.preferences._Module_name_Preferences;
import ru.surf.core.data.preferences.CorePreferences;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ModuleDefault_Provide_Module_name_PreferencesFactory implements Factory<_Module_name_Preferences> {
  private final Provider<CorePreferences> corePreferencesProvider;

  public ModuleDefault_Provide_Module_name_PreferencesFactory(
      Provider<CorePreferences> corePreferencesProvider) {
    this.corePreferencesProvider = corePreferencesProvider;
  }

  @Override
  public _Module_name_Preferences get() {
    return provide_Module_name_Preferences(corePreferencesProvider.get());
  }

  public static ModuleDefault_Provide_Module_name_PreferencesFactory create(
      Provider<CorePreferences> corePreferencesProvider) {
    return new ModuleDefault_Provide_Module_name_PreferencesFactory(corePreferencesProvider);
  }

  public static _Module_name_Preferences provide_Module_name_Preferences(
      CorePreferences corePreferences) {
    return Preconditions.checkNotNullFromProvides(ModuleDefault.INSTANCE.provide_Module_name_Preferences(corePreferences));
  }
}
